com/linka/linkaapikit/module/api/LinkaAPIServiceConfig = Com.Linka.Linkaapikit.Module.Api.LinkaAPIServiceConfig
  <init>()V = .ctor()
  apiProtocol = ApiProtocol
  API_VERSION = ApiVersion
  applicationContext = ApplicationContext
  isDebug = IsDebug
  URL = Url
  getAPIProtocol()Lcom/linka/linkaapikit/module/api/LinkaMerchantAPIProtocol; = APIProtocol
  setAPIProtocol(Lcom/linka/linkaapikit/module/api/LinkaMerchantAPIProtocol;)V = APIProtocol
  getApplicationContext()Landroid/content/Context; = ApplicationContext
  getLastKnownLocation()Landroid/location/Location; = LastKnownLocation
  getSecureAndroidId()Ljava/lang/String; = SecureAndroidId
  initialize(Landroid/content/Context;)V = Initialize(Android.Content.Context)
  log(Ljava/lang/String;)V = Log(string)
com/linka/linkaapikit/module/api/LinkaAPIServiceManager = Com.Linka.Linkaapikit.Module.Api.LinkaAPIServiceManager
  <init>()V = .ctor()
  getInstanceMerchant()Lcom/linka/linkaapikit/module/api/LinkaMerchantAPIService; = InstanceMerchant
com/linka/linkaapikit/module/api/LinkaAPIServiceResponse = Com.Linka.Linkaapikit.Module.Api.LinkaAPIServiceResponse
  <init>()V = .ctor()
  message = Message
  status = Status
  statusCode = StatusCode
  isError(Lcom/linka/linkaapikit/module/api/LinkaAPIServiceResponse;)Z = IsError(Com.Linka.Linkaapikit.Module.Api.LinkaAPIServiceResponse)
  isNetworkError(Lcom/linka/linkaapikit/module/api/LinkaAPIServiceResponse;)Z = IsNetworkError(Com.Linka.Linkaapikit.Module.Api.LinkaAPIServiceResponse)
  isSuccess(Lcom/linka/linkaapikit/module/api/LinkaAPIServiceResponse;)Z = IsSuccess(Com.Linka.Linkaapikit.Module.Api.LinkaAPIServiceResponse)
com/linka/linkaapikit/module/api/LinkaMerchantAPIProtocol = Com.Linka.Linkaapikit.Module.Api.ILinkaMerchantAPIProtocol
  getLastKnownLocation()Landroid/location/Location; = LastKnownLocation
  getSecureAndroidId()Ljava/lang/String; = SecureAndroidId
  LinkaMerchantAPI_getAPIKey()Ljava/lang/String; = LinkaMerchantAPI_getAPIKey()
  LinkaMerchantAPI_getIsButtonUsed()Z = LinkaMerchantAPI_getIsButtonUsed()
  LinkaMerchantAPI_getSecretKey()Ljava/lang/String; = LinkaMerchantAPI_getSecretKey()
com/linka/linkaapikit/module/api/LinkaMerchantAPIServiceImpl = Com.Linka.Linkaapikit.Module.Api.LinkaMerchantAPIServiceImpl
  <init>()V = .ctor()
  getAccessToken()Ljava/lang/String; = AccessToken
  hasAccessToken()Z = HasAccessToken
  getUserID()Ljava/lang/String; = UserID
  bond_lock(Lcom/linka/linkaapikit/module/model/Linka;Lcom/linka/linkaapikit/module/api/ResponseCallback;)V = Bond_lock(Com.Linka.Linkaapikit.Module.Model.Linka, Com.Linka.Linkaapikit.Module.Api.ResponseCallback)
  clearAccessToken()V = ClearAccessToken()
  doErrors(Lcom/linka/linkaapikit/module/api/LinkaAPIServiceResponse;Landroid/content/Context;)Z = DoErrors(Com.Linka.Linkaapikit.Module.Api.LinkaAPIServiceResponse, Android.Content.Context)
  fetch_access_token(Lcom/linka/linkaapikit/module/api/ResponseCallback;)V = Fetch_access_token(Com.Linka.Linkaapikit.Module.Api.ResponseCallback)
  isNetworkAvailable(Landroid/content/Context;)Z = IsNetworkAvailable(Android.Content.Context)
  pairUpWithLockNumber(ILcom/linka/linkaapikit/module/api/LinkaMerchantAPIServiceImpl$LinkaMerchantAPICallbacks;)V = PairUpWithLockNumber(int, Com.Linka.Linkaapikit.Module.Api.LinkaMerchantAPIServiceImpl.ILinkaMerchantAPICallbacks)
  register_new_lock_keys(Lcom/linka/linkaapikit/module/model/Linka;Ljava/lang/String;Ljava/lang/String;Lcom/linka/linkaapikit/module/api/ResponseCallback;)V = Register_new_lock_keys(Com.Linka.Linkaapikit.Module.Model.Linka, string, string, Com.Linka.Linkaapikit.Module.Api.ResponseCallback)
  saveAccessToken(Ljava/lang/String;)V = SaveAccessToken(string)
  sdk_remote_lock(Lcom/linka/linkaapikit/module/model/Linka;Lcom/linka/linkaapikit/module/api/ResponseCallback;)V = Sdk_remote_lock(Com.Linka.Linkaapikit.Module.Model.Linka, Com.Linka.Linkaapikit.Module.Api.ResponseCallback)
  sdk_remote_unlock(Lcom/linka/linkaapikit/module/model/Linka;Lcom/linka/linkaapikit/module/api/ResponseCallback;)V = Sdk_remote_unlock(Com.Linka.Linkaapikit.Module.Model.Linka, Com.Linka.Linkaapikit.Module.Api.ResponseCallback)
  tryDeclareLockOwnership(Lcom/linka/linkaapikit/module/Lock/BLE/BluetoothLEDevice;Lcom/linka/linkaapikit/module/api/LinkaMerchantAPIServiceImpl$LinkaMerchantAPICallbacks;)V = TryDeclareLockOwnership(Com.Linka.Linkaapikit.Module.Lock.BLE.BluetoothLEDevice, Com.Linka.Linkaapikit.Module.Api.LinkaMerchantAPIServiceImpl.ILinkaMerchantAPICallbacks)
  tryPreparePairingUp(Lcom/linka/linkaapikit/module/Lock/BLE/BluetoothLEDevice;Lcom/linka/linkaapikit/module/api/LinkaMerchantAPIServiceImpl$LinkaMerchantAPICallbacks;)V = TryPreparePairingUp(Com.Linka.Linkaapikit.Module.Lock.BLE.BluetoothLEDevice, Com.Linka.Linkaapikit.Module.Api.LinkaMerchantAPIServiceImpl.ILinkaMerchantAPICallbacks)
  tryPreparePairingUpV2(Ljava/lang/String;Lcom/linka/linkaapikit/module/api/LinkaMerchantAPIServiceImpl$LinkaMerchantAPICallbacks;)V = TryPreparePairingUpV2(string, Com.Linka.Linkaapikit.Module.Api.LinkaMerchantAPIServiceImpl.ILinkaMerchantAPICallbacks)
com/linka/linkaapikit/module/api/LinkaMerchantAPIServiceResponse = Com.Linka.Linkaapikit.Module.Api.LinkaMerchantAPIServiceResponse
  <init>()V = .ctor()
  data = Data
com/linka/linkaapikit/module/api/LinkaMerchantlockAPIServiceResponse = Com.Linka.Linkaapikit.Module.Api.LinkaMerchantlockAPIServiceResponse
  <init>()V = .ctor()
  data = Data
com/linka/linkaapikit/module/api/LinkaMerchantlockListAPIServiceResponse = Com.Linka.Linkaapikit.Module.Api.LinkaMerchantlockListAPIServiceResponse
  <init>()V = .ctor()
  data = Data
com/linka/linkaapikit/module/api/ResponseCallback = Com.Linka.Linkaapikit.Module.Api.ResponseCallback
  <init>()V = .ctor()
  onError(ILjava/lang/String;)V = OnError(int, string)
com/linka/linkaapikit/module/api/SettingConfiguration = Com.Linka.Linkaapikit.Module.Api.SettingConfiguration
  <init>()V = .ctor()
  assistNow = AssistNow
  audio = Audio
  disconnectedLock = DisconnectedLock
  fullGps = FullGps
  gnssFilter = GnssFilter
  gnssMode = GnssMode
  gpsOffBatteryPercent = GpsOffBatteryPercent
  lockBattery = LockBattery
  lockedInterval = LockedInterval
  lockedSleep = LockedSleep
  lockWithMovement = LockWithMovement
  loopControl = LoopControl
  modemType = ModemType
  motorSpeed = MotorSpeed
  networkCode = NetworkCode
  periodAInterval = PeriodAInterval
  periodAStart = PeriodAStart
  periodBInterval = PeriodBInterval
  periodBStart = PeriodBStart
  sleepBattery = SleepBattery
  statePing = StatePing
  theftDuration = TheftDuration
  theftInterval = TheftInterval
  unlockBattery = UnlockBattery
  unlockedDuration = UnlockedDuration
  unlockedInterval = UnlockedInterval
  unlockedMovement = UnlockedMovement
  unlockedSleep = UnlockedSleep
  volume = Volume
com/linka/linkaapikit/module/helpers/BLEHelpers = Com.Linka.Linkaapikit.Module.Helpers.BLEHelpers
  <init>()V = .ctor()
  REQUEST_ENABLE_BT = RequestEnableBt
  SCAN_PERIOD = ScanPeriod
  checkBLESupportForAdapter(Landroid/content/Context;)Landroid/bluetooth/BluetoothAdapter; = CheckBLESupportForAdapter(Android.Content.Context)
  initialize(Landroid/content/Context;)V = Initialize(Android.Content.Context)
  isValidLinkaLock(Lcom/linka/linkaapikit/module/Lock/BLE/BluetoothLEDevice;)Z = IsValidLinkaLock(Com.Linka.Linkaapikit.Module.Lock.BLE.BluetoothLEDevice)
  makeBluetoothLEDevice(Landroid/bluetooth/BluetoothDevice;I[BZ)Lcom/linka/linkaapikit/module/Lock/BLE/BluetoothLEDevice; = MakeBluetoothLEDevice(Android.Bluetooth.BluetoothDevice, int, byte[], bool)
  upsertBluetoothLEDeviceList(Ljava/util/List;Ljava/util/List;Landroid/bluetooth/BluetoothDevice;I[B)Lcom/linka/linkaapikit/module/model/Linka; = UpsertBluetoothLEDeviceList(System.Collections.Generic.IList<Com.Linka.Linkaapikit.Module.Lock.BLE.BluetoothLEDevice>, System.Collections.Generic.IList<Com.Linka.Linkaapikit.Module.Model.Linka>, Android.Bluetooth.BluetoothDevice, int, byte[])
com/linka/linkaapikit/module/helpers/LogHelper = Com.Linka.Linkaapikit.Module.Helpers.LogHelper
  <init>()V = .ctor()
  logLevel = LogLevel
  prefix = Prefix
  suffix = Suffix
  d(Ljava/lang/String;Ljava/lang/String;)V = D(string, string)
  e(Ljava/lang/String;Ljava/lang/String;)V = E(string, string)
  i(Ljava/lang/String;Ljava/lang/String;)V = I(string, string)
com/linka/linkaapikit/module/Lock/BLE/BluetoothLEDevice = Com.Linka.Linkaapikit.Module.Lock.BLE.BluetoothLEDevice
  <init>(Landroid/bluetooth/BluetoothDevice;I[BZ)V = .ctor(Android.Bluetooth.BluetoothDevice, int, byte[], bool)
  getAddress()Ljava/lang/String; = Address
  getDevice()Landroid/bluetooth/BluetoothDevice; = Device
  isBonded()Z = IsBonded
  getLockAdData()Ljava/lang/String; = LockAdData
  getLockAdPassState()Z = LockAdPassState
  getMfgScanRec()Ljava/lang/String; = MfgScanRec
  getName()Ljava/lang/String; = Name
  getRSSI()I = RSSI
  compareTo(Ljava/lang/Object;)I = CompareTo(Java.Lang.Object)
  getScanRecord()[B = GetScanRecord()
  getUUIDFromByteArray([BI)Ljava/util/UUID; = GetUUIDFromByteArray(byte[], int)
  getUUIDReversedFromByteArray([BI)Ljava/util/UUID; = GetUUIDReversedFromByteArray(byte[], int)
  has128BitUUID(Ljava/util/UUID;)Z = Has128BitUUID(Java.Util.UUID)
  reverseByteArray([BI)[B = ReverseByteArray(byte[], int)
  setSortByRSSI(Z)V = SetSortByRSSI(bool)
com/linka/linkaapikit/module/Lock/BLE/BluetoothLeQueuedService = Com.Linka.Linkaapikit.Module.Lock.BLE.BluetoothLeQueuedService
  <init>()V = .ctor()
  ACTION_BOND_STATE_CHANGED = ActionBondStateChanged
  ACTION_DATA_AVAILABLE = ActionDataAvailable
  ACTION_GATT_CONNECTED = ActionGattConnected
  ACTION_GATT_DISCONNECTED = ActionGattDisconnected
  ACTION_GATT_SERVICES_DISCOVERED = ActionGattServicesDiscovered
  ACTION_REMOTE_RSSI_UPDATED = ActionRemoteRssiUpdated
  allowReconnect = AllowReconnect
  b = B
  EXTRA_CHARACTERISTIC = ExtraCharacteristic
  EXTRA_DATA = ExtraData
  a(Ljava/lang/String;Landroid/bluetooth/BluetoothGatt;I)V = A(string, Android.Bluetooth.BluetoothGatt, int)
  a(Ljava/lang/String;Landroid/bluetooth/BluetoothGattCharacteristic;Landroid/bluetooth/BluetoothGatt;)V = A(string, Android.Bluetooth.BluetoothGattCharacteristic, Android.Bluetooth.BluetoothGatt)
  close(Landroid/bluetooth/BluetoothGatt;)V = Close(Android.Bluetooth.BluetoothGatt)
  connect(Ljava/lang/String;Landroid/bluetooth/BluetoothGatt;Lcom/linka/linkaapikit/module/Lock/BLE/BluetoothLeQueuedService$BluetoothGattQueuedActions;)Landroid/bluetooth/BluetoothGatt; = Connect(string, Android.Bluetooth.BluetoothGatt, Com.Linka.Linkaapikit.Module.Lock.BLE.BluetoothLeQueuedService.BluetoothGattQueuedActions)
  createBond(Landroid/bluetooth/BluetoothGatt;)Z = CreateBond(Android.Bluetooth.BluetoothGatt)
  disconnect(Landroid/bluetooth/BluetoothGatt;)V = Disconnect(Android.Bluetooth.BluetoothGatt)
  getCharacteristicByUUID(Ljava/util/UUID;Landroid/bluetooth/BluetoothGatt;)Landroid/bluetooth/BluetoothGattCharacteristic; = GetCharacteristicByUUID(Java.Util.UUID, Android.Bluetooth.BluetoothGatt)
  getSupportedGattServices(Landroid/bluetooth/BluetoothGatt;)Ljava/util/List; = GetSupportedGattServices(Android.Bluetooth.BluetoothGatt)
  initialize()Z = Initialize()
  onBind(Landroid/content/Intent;)Landroid/os/IBinder; = OnBind(Android.Content.Intent)
  readCharacteristic(Landroid/bluetooth/BluetoothGattCharacteristic;Landroid/bluetooth/BluetoothGatt;Lcom/linka/linkaapikit/module/Lock/BLE/BluetoothLeQueuedService$BluetoothGattQueuedActions;)Z = ReadCharacteristic(Android.Bluetooth.BluetoothGattCharacteristic, Android.Bluetooth.BluetoothGatt, Com.Linka.Linkaapikit.Module.Lock.BLE.BluetoothLeQueuedService.BluetoothGattQueuedActions)
  readCharacteristic(Ljava/lang/String;Landroid/bluetooth/BluetoothGatt;Lcom/linka/linkaapikit/module/Lock/BLE/BluetoothLeQueuedService$BluetoothGattQueuedActions;)Z = ReadCharacteristic(string, Android.Bluetooth.BluetoothGatt, Com.Linka.Linkaapikit.Module.Lock.BLE.BluetoothLeQueuedService.BluetoothGattQueuedActions)
  readCharacteristicNoQueue(Landroid/bluetooth/BluetoothGattCharacteristic;Landroid/bluetooth/BluetoothGatt;)Z = ReadCharacteristicNoQueue(Android.Bluetooth.BluetoothGattCharacteristic, Android.Bluetooth.BluetoothGatt)
  setCharacteristicIndication(Landroid/bluetooth/BluetoothGattCharacteristic;ZLandroid/bluetooth/BluetoothGatt;Lcom/linka/linkaapikit/module/Lock/BLE/BluetoothLeQueuedService$BluetoothGattQueuedActions;)Z = SetCharacteristicIndication(Android.Bluetooth.BluetoothGattCharacteristic, bool, Android.Bluetooth.BluetoothGatt, Com.Linka.Linkaapikit.Module.Lock.BLE.BluetoothLeQueuedService.BluetoothGattQueuedActions)
  setCharacteristicNotification(Landroid/bluetooth/BluetoothGattCharacteristic;ZLandroid/bluetooth/BluetoothGatt;Lcom/linka/linkaapikit/module/Lock/BLE/BluetoothLeQueuedService$BluetoothGattQueuedActions;)Z = SetCharacteristicNotification(Android.Bluetooth.BluetoothGattCharacteristic, bool, Android.Bluetooth.BluetoothGatt, Com.Linka.Linkaapikit.Module.Lock.BLE.BluetoothLeQueuedService.BluetoothGattQueuedActions)
  writeCharacteristic(Landroid/bluetooth/BluetoothGattCharacteristic;Landroid/bluetooth/BluetoothGatt;Lcom/linka/linkaapikit/module/Lock/BLE/BluetoothLeQueuedService$BluetoothGattQueuedActions;)Z = WriteCharacteristic(Android.Bluetooth.BluetoothGattCharacteristic, Android.Bluetooth.BluetoothGatt, Com.Linka.Linkaapikit.Module.Lock.BLE.BluetoothLeQueuedService.BluetoothGattQueuedActions)
  writeDescriptor(Landroid/bluetooth/BluetoothGattDescriptor;Landroid/bluetooth/BluetoothGatt;Lcom/linka/linkaapikit/module/Lock/BLE/BluetoothLeQueuedService$BluetoothGattQueuedActions;)Z = WriteDescriptor(Android.Bluetooth.BluetoothGattDescriptor, Android.Bluetooth.BluetoothGatt, Com.Linka.Linkaapikit.Module.Lock.BLE.BluetoothLeQueuedService.BluetoothGattQueuedActions)
com/linka/linkaapikit/module/Lock/BLE/BluetoothLeService = Com.Linka.Linkaapikit.Module.Lock.BLE.BluetoothLeService
  <init>()V = .ctor()
  ACTION_DATA_AVAILABLE = ActionDataAvailable
  ACTION_GATT_CONNECTED = ActionGattConnected
  ACTION_GATT_DISCONNECTED = ActionGattDisconnected
  ACTION_GATT_SERVICES_DISCOVERED = ActionGattServicesDiscovered
  EXTRA_CHARACTERISTIC = ExtraCharacteristic
  EXTRA_DATA = ExtraData
  getSupportedGattServices()Ljava/util/List; = SupportedGattServices
  close()V = Close()
  connect(Ljava/lang/String;)Z = Connect(string)
  disconnect()V = Disconnect()
  getCharacteristicByUUID(Ljava/util/UUID;)Landroid/bluetooth/BluetoothGattCharacteristic; = GetCharacteristicByUUID(Java.Util.UUID)
  initialize()Z = Initialize()
  onBind(Landroid/content/Intent;)Landroid/os/IBinder; = OnBind(Android.Content.Intent)
com/linka/linkaapikit/module/Lock/FirmwareAPI/LINKA_BLE_Service = Com.Linka.Linkaapikit.Module.Lock.FirmwareAPI.LINKA_BLE_Service
  <init>()V = .ctor()
  a(Landroid/bluetooth/BluetoothGatt;)V = A(Android.Bluetooth.BluetoothGatt)
  a([BLandroid/bluetooth/BluetoothGatt;Lcom/linka/linkaapikit/module/Lock/FirmwareAPI/LINKA_BLE_Service$BluetoothGattCharacteristicBundle;Lcom/linka/linkaapikit/module/Lock/BLE/BluetoothLeQueuedService$BluetoothGattQueuedActions;)Z = A(byte[], Android.Bluetooth.BluetoothGatt, Com.Linka.Linkaapikit.Module.Lock.FirmwareAPI.LINKA_BLE_Service.BluetoothGattCharacteristicBundle, Com.Linka.Linkaapikit.Module.Lock.BLE.BluetoothLeQueuedService.BluetoothGattQueuedActions)
  a(Ljava/lang/String;Ljava/lang/String;)V = A(string, string)
  a(Ljava/util/UUID;Landroid/bluetooth/BluetoothGatt;Lcom/linka/linkaapikit/module/Lock/FirmwareAPI/LINKA_BLE_Service$BluetoothGattCharacteristicBundle;Lcom/linka/linkaapikit/module/Lock/BLE/BluetoothLeQueuedService$BluetoothGattQueuedActions;)Z = A(Java.Util.UUID, Android.Bluetooth.BluetoothGatt, Com.Linka.Linkaapikit.Module.Lock.FirmwareAPI.LINKA_BLE_Service.BluetoothGattCharacteristicBundle, Com.Linka.Linkaapikit.Module.Lock.BLE.BluetoothLeQueuedService.BluetoothGattQueuedActions)
  b(Landroid/bluetooth/BluetoothGatt;Lcom/linka/linkaapikit/module/Lock/BLE/BluetoothLeQueuedService$BluetoothGattQueuedActions;)Lcom/linka/linkaapikit/module/Lock/FirmwareAPI/LINKA_BLE_Service$BluetoothGattCharacteristicBundle; = B(Android.Bluetooth.BluetoothGatt, Com.Linka.Linkaapikit.Module.Lock.BLE.BluetoothLeQueuedService.BluetoothGattQueuedActions)
com/linka/linkaapikit/module/model/Linka = Com.Linka.Linkaapikit.Module.Model.Linka
  <init>()V = .ctor()
  actuations = Actuations
  api_user_id = ApiUserId
  authState = AuthState
  awaitsForAutoUnlocking = AwaitsForAutoUnlocking
  batteryPercent = BatteryPercent
  canRecordBatteryCriticallyLow = CanRecordBatteryCriticallyLow
  canRecordBatteryLow = CanRecordBatteryLow
  canRecordStall = CanRecordStall
  fw_version = FwVersion
  id = Id
  isConnected = IsConnected
  isLocked = IsLocked
  isLocking = IsLocking
  isRecorded = IsRecorded
  isUnlocked = IsUnlocked
  isUnlocking = IsUnlocking
  latitude = Latitude
  lock_address = LockAddress
  lock_mac_address = LockMacAddress
  lock_name = LockName
  lockState = LockState
  longitude = Longitude
  pac = Pac
  rssi = Rssi
  settings_audible_locking_unlocking = SettingsAudibleLockingUnlocking
  settings_auto_unlocking = SettingsAutoUnlocking
  settings_passcode_is_set = SettingsPasscodeIsSet
  settings_tamper_siren = SettingsTamperSiren
  tamperStatus = TamperStatus
  temperature = Temperature
  timestamp_locked = TimestampLocked
  timestamp_unlocked = TimestampUnlocked
  getAccess_key_admin_2()Ljava/lang/String; = Access_key_admin_2
  setAccess_key_admin_2(Ljava/lang/String;)V = Access_key_admin_2
  getApi_user_id()Ljava/lang/String; = Api_user_id
  setApi_user_id(Ljava/lang/String;)V = Api_user_id
  getBatteryRemainingRepresentation()Ljava/lang/String; = BatteryRemainingRepresentation
  getId()J = Id
  setId(J)V = Id
  isTamperAlert()Z = IsTamperAlert
  getLinkas()Ljava/util/List; = Linkas
  getMACAddress()Ljava/lang/String; = MACAddress
  getName()Ljava/lang/String; = Name
  getUUIDAddress()Ljava/lang/String; = UUIDAddress
  getV2_access_key_admin_2()Ljava/lang/String; = V2_access_key_admin_2
  setV2_access_key_admin_2(Ljava/lang/String;)V = V2_access_key_admin_2
  getAdminKey(Ljava/lang/Boolean;)Ljava/lang/String; = GetAdminKey(Java.Lang.Boolean)
  getName(Ljava/lang/String;Lcom/linka/linkaapikit/module/Lock/BLE/BluetoothLEDevice;)Ljava/lang/String; = GetName(string, Com.Linka.Linkaapikit.Module.Lock.BLE.BluetoothLEDevice)
  makeLinka(Lcom/linka/linkaapikit/module/Lock/BLE/BluetoothLEDevice;)Lcom/linka/linkaapikit/module/model/Linka; = MakeLinka(Com.Linka.Linkaapikit.Module.Lock.BLE.BluetoothLEDevice)
  makeLinka(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lcom/linka/linkaapikit/module/model/Linka; = MakeLinka(string, string, string)
  recordLockActivity(B)V = RecordLockActivity(sbyte)
  saveLatLng(Ljava/lang/Double;Ljava/lang/Double;)V = SaveLatLng(Java.Lang.Double, Java.Lang.Double)
  saveSettings()Z = SaveSettings()
  setAdminKeys(Ljava/lang/String;Ljava/lang/String;)V = SetAdminKeys(string, string)
  updateBatteryPercent(I)V = UpdateBatteryPercent(int)
  updateRSSI(ZI)Z = UpdateRSSI(bool, int)
com/linka/linkaapikit/module/model/LinkaMerchantActivity = Com.Linka.Linkaapikit.Module.Model.LinkaMerchantActivity
  <init>()V = .ctor()
  actuations = Actuations
  alarm = Alarm
  api_version = ApiVersion
  battery_percent = BatteryPercent
  fw_version = FwVersion
  latitude = Latitude
  LINKA_ACTIVITY_ON_CHANGE = LinkaActivityOnChange
  linka_activity_status = LinkaActivityStatus
  linka_id = LinkaId
  linka_uuid = LinkaUuid
  lock_serial_no = LockSerialNo
  longitude = Longitude
  msg_desc = MsgDesc
  os_version = OsVersion
  pac = Pac
  platform = Platform
  temperature = Temperature
  getAppVersion()Ljava/lang/String; = AppVersion
  getDeviceName()Ljava/lang/String; = DeviceName
  getApplicationName(Landroid/content/Context;)Ljava/lang/String; = GetApplicationName(Android.Content.Context)
  removeAllActivitiesForLinka(Lcom/linka/linkaapikit/module/model/Linka;)Z = RemoveAllActivitiesForLinka(Com.Linka.Linkaapikit.Module.Model.Linka)
  saveLinkaMerchantError(Lcom/linka/linkaapikit/module/model/Linka;I)V = SaveLinkaMerchantError(Com.Linka.Linkaapikit.Module.Model.Linka, int)
com/linka/linkaapikit/module/model/LinkaMerchantlock = Com.Linka.Linkaapikit.Module.Model.LinkaMerchantlock
  <init>()V = .ctor()
com/linka/linkaapikit/module/model/LockConnectionService = Com.Linka.Linkaapikit.Module.Model.LockConnectionService
  <init>(Landroid/content/Context;Lcom/linka/linkaapikit/module/model/LockConnectionService$SuccessCallbacks;Lcom/linka/linkaapikit/module/model/LockConnectionService$ErrorCallbacks;)V = .ctor(Android.Content.Context, Com.Linka.Linkaapikit.Module.Model.LockConnectionService.ISuccessCallbacks, Com.Linka.Linkaapikit.Module.Model.LockConnectionService.IErrorCallbacks)
  DisableAutomaticDisconnect = DisableAutomaticDisconnect
  scanFoundAnyDevice = ScanFoundAnyDevice
  write_setting_audio = WriteSettingAudio
  write_setting_locked_sleep = WriteSettingLockedSleep
  write_setting_pac = WriteSettingPac
  write_setting_unlocked_sleep = WriteSettingUnlockedSleep
  getFwVersion()Ljava/lang/String; = FwVersion
  isCharging()Z = IsCharging
  isTether()Z = IsTether
  getLockLog()Ljava/lang/String; = LockLog
  getWrite_setting_audio()I = Write_setting_audio
  setWrite_setting_audio(I)V = Write_setting_audio
  getWrite_setting_locked_sleep()I = Write_setting_locked_sleep
  setWrite_setting_locked_sleep(I)V = Write_setting_locked_sleep
  getWrite_setting_unlocked_sleep()I = Write_setting_unlocked_sleep
  setWrite_setting_unlocked_sleep(I)V = Write_setting_unlocked_sleep
  beginDebugLockLog()V = BeginDebugLockLog()
  checkIsConnected()Z = CheckIsConnected()
  doFwUpgrade()Lcom/linka/linkaapikit/module/widget/LockController; = DoFwUpgrade()
  doLock()Z = DoLock()
  doRead_airplane_mode()V = DoRead_airplane_mode()
  doRead_setting_audio()V = DoRead_setting_audio()
  doRead_setting_keyfob()V = DoRead_setting_keyfob()
  doRead_setting_lock_sleep()V = DoRead_setting_lock_sleep()
  doRead_setting_pac()V = DoRead_setting_pac()
  doRead_setting_unlock_sleep()V = DoRead_setting_unlock_sleep()
  doSiren()V = DoSiren()
  doSleep()V = DoSleep()
  doUnlock()Z = DoUnlock()
  factoryResetDevice(Lcom/linka/linkaapikit/module/model/RevocationController$FactoryResetDelegate;)V = FactoryResetDevice(Com.Linka.Linkaapikit.Module.Model.RevocationController.IFactoryResetDelegate)
  onDisconnect()V = OnDisconnect()
  query()Z = Query()
  setLinkaLockNumber(Ljava/lang/String;)V = SetLinkaLockNumber(string)
  setLinkaMacAddress(Ljava/lang/String;)V = SetLinkaMacAddress(string)
  setLockStatusCallback(Lcom/linka/linkaapikit/module/model/LockConnectionService$LockStatusCallback;)V = SetLockStatusCallback(Com.Linka.Linkaapikit.Module.Model.LockConnectionService.ILockStatusCallback)
  setWrite_airplane_mode(Z)V = SetWrite_airplane_mode(bool)
  setWrite_setting_pac(I)V = SetWrite_setting_pac(int)
  tryAgainLock()V = TryAgainLock()
  tryAgainUnlock()V = TryAgainUnlock()
  unassignKeyfob()Z = UnassignKeyfob()
com/linka/linkaapikit/module/model/RevocationController = Com.Linka.Linkaapikit.Module.Model.RevocationController
  <init>()V = .ctor()
  CAN_START_FACTORY_RESET = CanStartFactoryReset
  FACTORY_RESET_SETTING = FactoryResetSetting
  FACTORY_RESET_SETTING_DEFAULT_VALUE = FactoryResetSettingDefaultValue
  FACTORY_RESET_SETTING_VALID_VALUE = FactoryResetSettingValidValue
  doFactoryReset(Lcom/linka/linkaapikit/module/model/Linka;Lcom/linka/linkaapikit/module/widget/LockController;Lcom/linka/linkaapikit/module/model/RevocationController$FactoryResetDelegate;)V = DoFactoryReset(Com.Linka.Linkaapikit.Module.Model.Linka, Com.Linka.Linkaapikit.Module.Widget.LockController, Com.Linka.Linkaapikit.Module.Model.RevocationController.IFactoryResetDelegate)
  FactoryResetErrorForceDoFactoryReset(Lcom/linka/linkaapikit/module/model/Linka;Lcom/linka/linkaapikit/module/widget/LockController;Lcom/linka/linkaapikit/module/model/RevocationController$FactoryResetDelegate;)V = FactoryResetErrorForceDoFactoryReset(Com.Linka.Linkaapikit.Module.Model.Linka, Com.Linka.Linkaapikit.Module.Widget.LockController, Com.Linka.Linkaapikit.Module.Model.RevocationController.IFactoryResetDelegate)
  startResetMaster()V = StartResetMaster()
com/linka/linkaapikit/module/widget/LockController = Com.Linka.Linkaapikit.Module.Widget.LockController
  access_key_master_2 = AccessKeyMaster2
  authenticationCountSeconds = AuthenticationCountSeconds
  AUTHENTICATION_SECONDS_COMMAND = AuthenticationSecondsCommand
  DisableAutomaticDisconnect = DisableAutomaticDisconnect
  isButtonUsedForLocking = IsButtonUsedForLocking
  isCRCFactoryReset = IsCRCFactoryReset
  isCRCKeyMismatch = IsCRCKeyMismatch
  lockControllerPacketCallback = LockControllerPacketCallback
  lockD2crc = LockD2crc
  lockLog = LockLog
  P = P
  PostLockDelaySeconds = PostLockDelaySeconds
  settingConfiguration = SettingConfiguration
  shouldRefreshBluetoothCache = ShouldRefreshBluetoothCache
  shouldSendCRCMismatchNotifacation = ShouldSendCRCMismatchNotifacation
  getLinka()Lcom/linka/linkaapikit/module/model/Linka; = Linka
  deinitialize()V = Deinitialize()
  doBond()Z = DoBond()
  doConnectDevice()V = DoConnectDevice()
  doConnectDevice(Z)V = DoConnectDevice(bool)
  doDefaultSettings()V = DoDefaultSettings()
  doDeleteAllBonds()Z = DoDeleteAllBonds()
  doDisconnectDevice()V = DoDisconnectDevice()
  doFwUpg()I = DoFwUpg()
  doLock()Z = DoLock()
  doQuickCommandLock(I)Z = DoQuickCommandLock(int)
  doQuickCommandScanning()Z = DoQuickCommandScanning()
  doQuickCommandUnlock(I)Z = DoQuickCommandUnlock(int)
  doReadActuations()Z = DoReadActuations()
  doReadAudioSetting()Z = DoReadAudioSetting()
  doReadFactoryResetSetting()V = DoReadFactoryResetSetting()
  doReadGpsOffBattery()Z = DoReadGpsOffBattery()
  doReadKeyfob()Z = DoReadKeyfob()
  doReadLockSleep()Z = DoReadLockSleep()
  doReadPAC()Z = DoReadPAC()
  doReadUnlockedDisconnectedSleep()Z = DoReadUnlockedDisconnectedSleep()
  doresetReboot()V = DoresetReboot()
  doSetAlarmSensitivity(Lcom/linka/linkaapikit/module/widget/LockController$AlarmSensitivity;)Z = DoSetAlarmSensitivity(Com.Linka.Linkaapikit.Module.Widget.LockController.AlarmSensitivity)
  doSetUnlockedBumpThreshold(I)Z = DoSetUnlockedBumpThreshold(int)
  doSiren(I)V = DoSiren(int)
  doSleep()V = DoSleep()
  doStop()V = DoStop()
  doUnbond()V = DoUnbond()
  doUnlock()Z = DoUnlock()
  doWriteAssistNow(I)Z = DoWriteAssistNow(int)
  doWriteAudioSetting(I)Z = DoWriteAudioSetting(int)
  doWriteAutolock(I)Z = DoWriteAutolock(int)
  doWriteDisconnectedLock(I)Z = DoWriteDisconnectedLock(int)
  doWriteFactoryResetSetting(I)V = DoWriteFactoryResetSetting(int)
  doWriteFullGps(I)Z = DoWriteFullGps(int)
  doWriteGnssFilter(I)Z = DoWriteGnssFilter(int)
  doWriteGnssMode(I)Z = DoWriteGnssMode(int)
  doWriteGpsMode(I)Z = DoWriteGpsMode(int)
  doWriteGpsOffBattery(I)Z = DoWriteGpsOffBattery(int)
  doWriteIpAddr(I)Z = DoWriteIpAddr(int)
  doWriteKeyfobSettings(Ljava/math/BigInteger;Ljava/math/BigInteger;Ljava/math/BigInteger;II)V = DoWriteKeyfobSettings(Java.Math.BigInteger, Java.Math.BigInteger, Java.Math.BigInteger, int, int)
  doWriteLeoSpeed(I)Z = DoWriteLeoSpeed(int)
  doWriteLockBattery(I)Z = DoWriteLockBattery(int)
  doWriteLockedPing(I)Z = DoWriteLockedPing(int)
  doWriteLockSleep(I)Z = DoWriteLockSleep(int)
  doWriteLoopControl(I)Z = DoWriteLoopControl(int)
  doWriteModemType(I)Z = DoWriteModemType(int)
  doWriteNetworkCode(I)Z = DoWriteNetworkCode(int)
  doWritePAC(I)Z = DoWritePAC(int)
  doWritePeriodAInterval(I)Z = DoWritePeriodAInterval(int)
  doWritePeriodAStart(I)Z = DoWritePeriodAStart(int)
  doWritePeriodBInterval(I)Z = DoWritePeriodBInterval(int)
  doWritePeriodBStart(I)Z = DoWritePeriodBStart(int)
  doWriteRemoteCommands(I)Z = DoWriteRemoteCommands(int)
  doWriteSleepBattery(I)Z = DoWriteSleepBattery(int)
  doWriteStatePing(I)Z = DoWriteStatePing(int)
  doWriteTheftDuration(I)Z = DoWriteTheftDuration(int)
  doWriteTheftInterval(I)Z = DoWriteTheftInterval(int)
  doWriteUnlockBattery(I)Z = DoWriteUnlockBattery(int)
  doWriteUnlockDuration(I)Z = DoWriteUnlockDuration(int)
  doWriteUnlockedDisconnectedSleep(I)Z = DoWriteUnlockedDisconnectedSleep(int)
  doWriteUnlockedMovement(I)Z = DoWriteUnlockedMovement(int)
  doWriteUnlockedPing(I)Z = DoWriteUnlockedPing(int)
  doWriteVolume(I)Z = DoWriteVolume(int)
  emptyEncryptedSettingsQueue()V = EmptyEncryptedSettingsQueue()
  incrementMacAddress(Ljava/lang/String;)Ljava/lang/String; = IncrementMacAddress(string)
  initialize()V = Initialize()
  keyfobMacFromInt(J)Ljava/lang/String; = KeyfobMacFromInt(long)
  refreshBluetoothCache()V = RefreshBluetoothCache()
  removeFactoryResetCallback()V = RemoveFactoryResetCallback()
  revokeKeyfob()V = RevokeKeyfob()
  setConnectionManager(Lcom/linka/linkaapikit/module/widget/LockController$LinkaBLEConnectionManager;)V = SetConnectionManager(Com.Linka.Linkaapikit.Module.Widget.LockController.ILinkaBLEConnectionManager)
  setFactoryResetCallbacks(Lcom/linka/linkaapikit/module/model/RevocationController$FactoryResetCallback;)V = SetFactoryResetCallbacks(Com.Linka.Linkaapikit.Module.Model.RevocationController.IFactoryResetCallback)
  setOnRefreshListener(Lcom/linka/linkaapikit/module/widget/LockController$OnRefreshListener;)V = SetOnRefreshListener(Com.Linka.Linkaapikit.Module.Widget.LockController.IOnRefreshListener)
com/linka/linkaapikit/module/widget/LockGattUpdateReceiver = Com.Linka.Linkaapikit.Module.Widget.LockGattUpdateReceiver
  getVersionInfo()Ljava/lang/String; = VersionInfo
  e()V = E()
  f()V = F()
com/linka/linkaapikit/module/widget/LockPairingController = Com.Linka.Linkaapikit.Module.Widget.LockPairingController
  c = C
  d = D
  e = E
  getLinka()Lcom/linka/linkaapikit/module/model/Linka; = Linka
  doDisconnectDevice()V = DoDisconnectDevice()
  initialize(Z)V = Initialize(bool)
com/linka/linkaapikit/module/widget/LocksController = Com.Linka.Linkaapikit.Module.Widget.LocksController
  <init>()V = .ctor()
  currentLockController = CurrentLockController
  getInstance()Lcom/linka/linkaapikit/module/widget/LocksController; = Instance
  init(Landroid/content/Context;)Lcom/linka/linkaapikit/module/widget/LocksController; = Init(Android.Content.Context)
com/opencsv/bean/AbstractCSVToBean = Com.Opencsv.Bean.AbstractCSVToBean
  <init>()V = .ctor()
com/opencsv/bean/BeanField = Com.Opencsv.Bean.BeanField
  <init>(Ljava/lang/reflect/Field;Z)V = .ctor(Java.Lang.Reflect.Field, bool)
  getField()Ljava/lang/reflect/Field; = Field
  isRequired()Z = IsRequired
  setFieldValue(Ljava/lang/Object;Ljava/lang/String;)V = SetFieldValue(Java.Lang.Object, string)
com/opencsv/bean/BeanToCsv = Com.Opencsv.Bean.BeanToCsv
  <init>()V = .ctor()
  processHeader(Lcom/opencsv/bean/MappingStrategy;)[Ljava/lang/String; = ProcessHeader(Com.Opencsv.Bean.IMappingStrategy)
  processObject(Ljava/util/List;Ljava/lang/Object;)[Ljava/lang/String; = ProcessObject(System.Collections.Generic.IList<Java.Lang.Reflect.Method>, Java.Lang.Object)
  write(Lcom/opencsv/bean/MappingStrategy;Lcom/opencsv/CSVWriter;Ljava/util/List;)Z = Write(Com.Opencsv.Bean.IMappingStrategy, Com.Opencsv.CSVWriter, System.Collections.IList)
  write(Lcom/opencsv/bean/MappingStrategy;Ljava/io/Writer;Ljava/util/List;)Z = Write(Com.Opencsv.Bean.IMappingStrategy, Java.IO.Writer, System.Collections.IList)
com/opencsv/bean/ColumnPositionMappingStrategy = Com.Opencsv.Bean.ColumnPositionMappingStrategy
  <init>()V = .ctor()
  getColumnMapping()[Ljava/lang/String; = GetColumnMapping()
  setColumnMapping([Ljava/lang/String;)V = SetColumnMapping(params string[])
com/opencsv/bean/CsvBind = Com.Opencsv.Bean.ICsvBind
  required()Z = Required()
com/opencsv/bean/CsvToBean = Com.Opencsv.Bean.CsvToBean
  <init>()V = .ctor()
  parse(Lcom/opencsv/bean/MappingStrategy;Lcom/opencsv/CSVReader;)Ljava/util/List; = Parse(Com.Opencsv.Bean.IMappingStrategy, Com.Opencsv.CSVReader)
  parse(Lcom/opencsv/bean/MappingStrategy;Lcom/opencsv/CSVReader;Lcom/opencsv/bean/CsvToBeanFilter;)Ljava/util/List; = Parse(Com.Opencsv.Bean.IMappingStrategy, Com.Opencsv.CSVReader, Com.Opencsv.Bean.ICsvToBeanFilter)
  parse(Lcom/opencsv/bean/MappingStrategy;Ljava/io/Reader;)Ljava/util/List; = Parse(Com.Opencsv.Bean.IMappingStrategy, Java.IO.Reader)
  parse(Lcom/opencsv/bean/MappingStrategy;Ljava/io/Reader;Lcom/opencsv/bean/CsvToBeanFilter;)Ljava/util/List; = Parse(Com.Opencsv.Bean.IMappingStrategy, Java.IO.Reader, Com.Opencsv.Bean.ICsvToBeanFilter)
  processLine(Lcom/opencsv/bean/MappingStrategy;[Ljava/lang/String;)Ljava/lang/Object; = ProcessLine(Com.Opencsv.Bean.IMappingStrategy, string[])
com/opencsv/bean/CsvToBeanFilter = Com.Opencsv.Bean.ICsvToBeanFilter
  allowLine([Ljava/lang/String;)Z = AllowLine(string[])
com/opencsv/bean/HeaderColumnNameMappingStrategy = Com.Opencsv.Bean.HeaderColumnNameMappingStrategy
  <init>()V = .ctor()
  annotationDriven = AnnotationDriven
  determinedIfAnnotationDriven = DeterminedIfAnnotationDriven
  fieldMap = FieldMap
  header = Header
  indexLookup = IndexLookup
  type = Type
  isAnnotationDriven()Z = IsAnnotationDriven
  getType()Ljava/lang/Class; = Type
  setType(Ljava/lang/Class;)V = Type
  captureHeader(Lcom/opencsv/CSVReader;)V = CaptureHeader(Com.Opencsv.CSVReader)
  createBean()Ljava/lang/Object; = CreateBean()
  createIndexLookup([Ljava/lang/String;)V = CreateIndexLookup(string[])
  findField(I)Lcom/opencsv/bean/BeanField; = FindField(int)
  findField(Ljava/lang/String;)Lcom/opencsv/bean/BeanField; = FindField(string)
  getColumnIndex(Ljava/lang/String;)Ljava/lang/Integer; = GetColumnIndex(string)
  getColumnName(I)Ljava/lang/String; = GetColumnName(int)
  loadFieldMap()Ljava/util/Map; = LoadFieldMap()
  resetIndexMap()V = ResetIndexMap()
com/opencsv/bean/HeaderColumnNameTranslateMappingStrategy = Com.Opencsv.Bean.HeaderColumnNameTranslateMappingStrategy
  <init>()V = .ctor()
  getColumnMapping()Ljava/util/Map; = ColumnMapping
  setColumnMapping(Ljava/util/Map;)V = ColumnMapping
com/opencsv/bean/IterableCSVToBean = Com.Opencsv.Bean.IterableCSVToBean
  <init>(Lcom/opencsv/CSVReader;Lcom/opencsv/bean/MappingStrategy;Lcom/opencsv/bean/CsvToBeanFilter;)V = .ctor(Com.Opencsv.CSVReader, Com.Opencsv.Bean.IMappingStrategy, Com.Opencsv.Bean.ICsvToBeanFilter)
  getCSVReader()Lcom/opencsv/CSVReader; = CSVReader
  getFilter()Lcom/opencsv/bean/CsvToBeanFilter; = Filter
  getStrategy()Lcom/opencsv/bean/MappingStrategy; = Strategy
  iterator()Ljava/util/Iterator; = Iterator()
  nextLine()Ljava/lang/Object; = NextLine()
com/opencsv/bean/IterableCSVToBeanBuilder = Com.Opencsv.Bean.IterableCSVToBeanBuilder
  <init>()V = .ctor()
  NO_MAPPING_STRATEGY_DEFINED = NoMappingStrategyDefined
  NO_READER_DEFINED = NoReaderDefined
  getCsvReader()Lcom/opencsv/CSVReader; = CsvReader
  getFilter()Ljava/lang/Object; = Filter
  getStrategy()Lcom/opencsv/bean/MappingStrategy; = Strategy
  build()Lcom/opencsv/bean/IterableCSVToBean; = Build()
  withFilter(Lcom/opencsv/bean/CsvToBeanFilter;)Lcom/opencsv/bean/IterableCSVToBeanBuilder; = WithFilter(Com.Opencsv.Bean.ICsvToBeanFilter)
  withMapper(Lcom/opencsv/bean/MappingStrategy;)Lcom/opencsv/bean/IterableCSVToBeanBuilder; = WithMapper(Com.Opencsv.Bean.IMappingStrategy)
  withReader(Lcom/opencsv/CSVReader;)Lcom/opencsv/bean/IterableCSVToBeanBuilder; = WithReader(Com.Opencsv.CSVReader)
com/opencsv/bean/MappingStrategy = Com.Opencsv.Bean.IMappingStrategy
  isAnnotationDriven()Z = IsAnnotationDriven
  captureHeader(Lcom/opencsv/CSVReader;)V = CaptureHeader(Com.Opencsv.CSVReader)
  createBean()Ljava/lang/Object; = CreateBean()
  findField(I)Lcom/opencsv/bean/BeanField; = FindField(int)
  getColumnIndex(Ljava/lang/String;)Ljava/lang/Integer; = GetColumnIndex(string)
com/opencsv/CSVIterator = Com.Opencsv.CSVIterator
  <init>(Lcom/opencsv/CSVReader;)V = .ctor(Com.Opencsv.CSVReader)
  hasNext()Z = HasNext
  next()[Ljava/lang/String; = Next()
  remove()V = Remove()
com/opencsv/CSVParser = Com.Opencsv.CSVParser
  <init>()V = .ctor()
  <init>(C)V = .ctor(char)
  <init>(CC)V = .ctor(char, char)
  <init>(CCC)V = .ctor(char, char, char)
  <init>(CCCZ)V = .ctor(char, char, char, bool)
  <init>(CCCZZ)V = .ctor(char, char, char, bool, bool)
  <init>(CCCZZZ)V = .ctor(char, char, char, bool, bool, bool)
  DEFAULT_ESCAPE_CHARACTER = DefaultEscapeCharacter
  DEFAULT_IGNORE_LEADING_WHITESPACE = DefaultIgnoreLeadingWhitespace
  DEFAULT_IGNORE_QUOTATIONS = DefaultIgnoreQuotations
  DEFAULT_NULL_FIELD_INDICATOR = DefaultNullFieldIndicator
  DEFAULT_QUOTE_CHARACTER = DefaultQuoteCharacter
  DEFAULT_SEPARATOR = DefaultSeparator
  DEFAULT_STRICT_QUOTES = DefaultStrictQuotes
  INITIAL_READ_SIZE = InitialReadSize
  NULL_CHARACTER = NullCharacter
  READ_BUFFER_SIZE = ReadBufferSize
  getEscape()C = Escape
  isIgnoreLeadingWhiteSpace()Z = IsIgnoreLeadingWhiteSpace
  isIgnoreQuotations()Z = IsIgnoreQuotations
  isPending()Z = IsPending
  isStrictQuotes()Z = IsStrictQuotes
  getQuotechar()C = Quotechar
  getSeparator()C = Separator
  isAllWhiteSpace(Ljava/lang/CharSequence;)Z = IsAllWhiteSpace(Java.Lang.ICharSequence)
  isNextCharacterEscapable(Ljava/lang/String;ZI)Z = IsNextCharacterEscapable(string, bool, int)
  nullFieldIndicator()Lcom/opencsv/enums/CSVReaderNullFieldIndicator; = NullFieldIndicator()
  parseLine(Ljava/lang/String;)[Ljava/lang/String; = ParseLine(string)
  parseLineMulti(Ljava/lang/String;)[Ljava/lang/String; = ParseLineMulti(string)
com/opencsv/CSVParserBuilder = Com.Opencsv.CSVParserBuilder
  <init>()V = .ctor()
  getEscapeChar()C = EscapeChar
  isIgnoreLeadingWhiteSpace()Z = IsIgnoreLeadingWhiteSpace
  isIgnoreQuotations()Z = IsIgnoreQuotations
  isStrictQuotes()Z = IsStrictQuotes
  getQuoteChar()C = QuoteChar
  getSeparator()C = Separator
  build()Lcom/opencsv/CSVParser; = Build()
  nullFieldIndicator()Lcom/opencsv/enums/CSVReaderNullFieldIndicator; = NullFieldIndicator()
  withEscapeChar(C)Lcom/opencsv/CSVParserBuilder; = WithEscapeChar(char)
  withFieldAsNull(Lcom/opencsv/enums/CSVReaderNullFieldIndicator;)Lcom/opencsv/CSVParserBuilder; = WithFieldAsNull(Com.Opencsv.Enums.CSVReaderNullFieldIndicator)
  withIgnoreLeadingWhiteSpace(Z)Lcom/opencsv/CSVParserBuilder; = WithIgnoreLeadingWhiteSpace(bool)
  withIgnoreQuotations(Z)Lcom/opencsv/CSVParserBuilder; = WithIgnoreQuotations(bool)
  withQuoteChar(C)Lcom/opencsv/CSVParserBuilder; = WithQuoteChar(char)
  withSeparator(C)Lcom/opencsv/CSVParserBuilder; = WithSeparator(char)
  withStrictQuotes(Z)Lcom/opencsv/CSVParserBuilder; = WithStrictQuotes(bool)
com/opencsv/CSVReader = Com.Opencsv.CSVReader
  <init>(Ljava/io/Reader;)V = .ctor(Java.IO.Reader)
  <init>(Ljava/io/Reader;C)V = .ctor(Java.IO.Reader, char)
  <init>(Ljava/io/Reader;CC)V = .ctor(Java.IO.Reader, char, char)
  <init>(Ljava/io/Reader;CCC)V = .ctor(Java.IO.Reader, char, char, char)
  <init>(Ljava/io/Reader;CCCI)V = .ctor(Java.IO.Reader, char, char, char, int)
  <init>(Ljava/io/Reader;CCCIZ)V = .ctor(Java.IO.Reader, char, char, char, int, bool)
  <init>(Ljava/io/Reader;CCCIZZ)V = .ctor(Java.IO.Reader, char, char, char, int, bool, bool)
  <init>(Ljava/io/Reader;CCCIZZZ)V = .ctor(Java.IO.Reader, char, char, char, int, bool, bool, bool)
  <init>(Ljava/io/Reader;CCI)V = .ctor(Java.IO.Reader, char, char, int)
  <init>(Ljava/io/Reader;CCZ)V = .ctor(Java.IO.Reader, char, char, bool)
  <init>(Ljava/io/Reader;ILcom/opencsv/CSVParser;)V = .ctor(Java.IO.Reader, int, Com.Opencsv.CSVParser)
  DEFAULT_KEEP_CR = DefaultKeepCr
  DEFAULT_SKIP_LINES = DefaultSkipLines
  DEFAULT_VERIFY_READER = DefaultVerifyReader
  READ_AHEAD_LIMIT = ReadAheadLimit
  getLinesRead()J = LinesRead
  getParser()Lcom/opencsv/CSVParser; = Parser
  getRecordsRead()J = RecordsRead
  getSkipLines()I = SkipLines
  close()V = Close()
  iterator()Ljava/util/Iterator; = Iterator()
  keepCarriageReturns()Z = KeepCarriageReturns()
  readAll()Ljava/util/List; = ReadAll()
  readNext()[Ljava/lang/String; = ReadNext()
  verifyReader()Z = VerifyReader()
com/opencsv/CSVReaderBuilder = Com.Opencsv.CSVReaderBuilder
  <init>(Ljava/io/Reader;)V = .ctor(Java.IO.Reader)
  getCsvParser()Lcom/opencsv/CSVParser; = CsvParser
  getReader()Ljava/io/Reader; = Reader
  getSkipLines()I = SkipLines
  build()Lcom/opencsv/CSVReader; = Build()
  keepCarriageReturn()Z = KeepCarriageReturn()
  withCSVParser(Lcom/opencsv/CSVParser;)Lcom/opencsv/CSVReaderBuilder; = WithCSVParser(Com.Opencsv.CSVParser)
  withFieldAsNull(Lcom/opencsv/enums/CSVReaderNullFieldIndicator;)Lcom/opencsv/CSVReaderBuilder; = WithFieldAsNull(Com.Opencsv.Enums.CSVReaderNullFieldIndicator)
  withKeepCarriageReturn(Z)Lcom/opencsv/CSVReaderBuilder; = WithKeepCarriageReturn(bool)
  withSkipLines(I)Lcom/opencsv/CSVReaderBuilder; = WithSkipLines(int)
  withVerifyReader(Z)Lcom/opencsv/CSVReaderBuilder; = WithVerifyReader(bool)
com/opencsv/CSVWriter = Com.Opencsv.CSVWriter
  <init>(Ljava/io/Writer;)V = .ctor(Java.IO.Writer)
  <init>(Ljava/io/Writer;C)V = .ctor(Java.IO.Writer, char)
  <init>(Ljava/io/Writer;CC)V = .ctor(Java.IO.Writer, char, char)
  <init>(Ljava/io/Writer;CCC)V = .ctor(Java.IO.Writer, char, char, char)
  <init>(Ljava/io/Writer;CCCLjava/lang/String;)V = .ctor(Java.IO.Writer, char, char, char, string)
  <init>(Ljava/io/Writer;CCLjava/lang/String;)V = .ctor(Java.IO.Writer, char, char, string)
  DEFAULT_ESCAPE_CHARACTER = DefaultEscapeCharacter
  DEFAULT_LINE_END = DefaultLineEnd
  DEFAULT_QUOTE_CHARACTER = DefaultQuoteCharacter
  DEFAULT_SEPARATOR = DefaultSeparator
  INITIAL_STRING_SIZE = InitialStringSize
  NO_ESCAPE_CHARACTER = NoEscapeCharacter
  NO_QUOTE_CHARACTER = NoQuoteCharacter
  RFC4180_LINE_END = Rfc4180LineEnd
  checkError()Z = CheckError()
  close()V = Close()
  flush()V = Flush()
  flushQuietly()V = FlushQuietly()
  processLine(Ljava/lang/String;)Ljava/lang/StringBuilder; = ProcessLine(string)
  setResultService(Lcom/opencsv/ResultSetHelper;)V = SetResultService(Com.Opencsv.IResultSetHelper)
  writeAll(Ljava/sql/ResultSet;Z)I = WriteAll(Java.Sql.IResultSet, bool)
  writeAll(Ljava/sql/ResultSet;ZZ)I = WriteAll(Java.Sql.IResultSet, bool, bool)
  writeAll(Ljava/util/List;)V = WriteAll(System.Collections.Generic.IList<string[]>)
  writeAll(Ljava/util/List;Z)V = WriteAll(System.Collections.Generic.IList<string[]>, bool)
  writeColumnNames(Ljava/sql/ResultSet;)V = WriteColumnNames(Java.Sql.IResultSet)
  writeNext([Ljava/lang/String;)V = WriteNext(string[])
  writeNext([Ljava/lang/String;Z)V = WriteNext(string[], bool)
com/opencsv/enums/CSVReaderNullFieldIndicator = Com.Opencsv.Enums.CSVReaderNullFieldIndicator
  BOTH = Both
  EMPTY_QUOTES = EmptyQuotes
  EMPTY_SEPARATORS = EmptySeparators
  NEITHER = Neither
  valueOf(Ljava/lang/String;)Lcom/opencsv/enums/CSVReaderNullFieldIndicator; = ValueOf(string)
  values()[Lcom/opencsv/enums/CSVReaderNullFieldIndicator; = Values()
com/opencsv/ResultSetHelper = Com.Opencsv.IResultSetHelper
  getColumnNames(Ljava/sql/ResultSet;)[Ljava/lang/String; = GetColumnNames(Java.Sql.IResultSet)
  getColumnValues(Ljava/sql/ResultSet;)[Ljava/lang/String; = GetColumnValues(Java.Sql.IResultSet)
  getColumnValues(Ljava/sql/ResultSet;Z)[Ljava/lang/String; = GetColumnValues(Java.Sql.IResultSet, bool)
  getColumnValues(Ljava/sql/ResultSet;ZLjava/lang/String;Ljava/lang/String;)[Ljava/lang/String; = GetColumnValues(Java.Sql.IResultSet, bool, string, string)
com/opencsv/ResultSetHelperService = Com.Opencsv.ResultSetHelperService
  <init>()V = .ctor()
  CLOBBUFFERSIZE = Clobbuffersize
  getColumnNames(Ljava/sql/ResultSet;)[Ljava/lang/String; = GetColumnNames(Java.Sql.IResultSet)
  getColumnValues(Ljava/sql/ResultSet;)[Ljava/lang/String; = GetColumnValues(Java.Sql.IResultSet)
  getColumnValues(Ljava/sql/ResultSet;Z)[Ljava/lang/String; = GetColumnValues(Java.Sql.IResultSet, bool)
  getColumnValues(Ljava/sql/ResultSet;ZLjava/lang/String;Ljava/lang/String;)[Ljava/lang/String; = GetColumnValues(Java.Sql.IResultSet, bool, string, string)
  handleBigDecimal(Ljava/math/BigDecimal;)Ljava/lang/String; = HandleBigDecimal(Java.Math.BigDecimal)
  handleDate(Ljava/sql/ResultSet;ILjava/lang/String;)Ljava/lang/String; = HandleDate(Java.Sql.IResultSet, int, string)
  handleInteger(Ljava/sql/ResultSet;I)Ljava/lang/String; = HandleInteger(Java.Sql.IResultSet, int)
  handleLong(Ljava/sql/ResultSet;I)Ljava/lang/String; = HandleLong(Java.Sql.IResultSet, int)
  handleObject(Ljava/lang/Object;)Ljava/lang/String; = HandleObject(Java.Lang.Object)
  handleTime(Ljava/sql/Time;)Ljava/lang/String; = HandleTime(Java.Sql.Time)
  handleTimestamp(Ljava/sql/Timestamp;Ljava/lang/String;)Ljava/lang/String; = HandleTimestamp(Java.Sql.Timestamp, string)
  setDateFormat(Ljava/lang/String;)V = SetDateFormat(string)
  setDateTimeFormat(Ljava/lang/String;)V = SetDateTimeFormat(string)
com/opencsv/stream/reader/LineReader = Com.Opencsv.Stream.Reader.LineReader
  <init>(Ljava/io/BufferedReader;Z)V = .ctor(Java.IO.BufferedReader, bool)
  readLine()Ljava/lang/String; = ReadLine()
